//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.0
//     from Assets/Code/AAAGame/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Inputs"",
            ""id"": ""b18b24b9-cb24-4987-af32-eabd596ece1e"",
            ""actions"": [
                {
                    ""name"": ""StartFirstTouch"",
                    ""type"": ""Button"",
                    ""id"": ""cc8b723d-afc0-415c-b64c-cf511ef358c3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StartSecondTouch"",
                    ""type"": ""Button"",
                    ""id"": ""00d0900f-66d9-43c8-b19b-fc90301afa99"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FirstTouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""2829a73d-2d0a-4a00-ad8a-9fdb42eb3f41"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondTouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""f6387dfc-9213-433a-a377-25fa928a76ab"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5f30c47f-1892-4d90-837b-c795ccae77fb"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstTouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0546c467-1e26-4ee0-b603-e5e170ce2a39"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondTouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e406dd3d-83b6-4f63-8d74-0baaedb342be"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartFirstTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8f7da43-274e-43b2-8506-819390259d38"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartSecondTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MapButtons"",
            ""id"": ""33363e04-c16d-4439-8598-bdf4d200d44d"",
            ""actions"": [
                {
                    ""name"": ""SelectWall"",
                    ""type"": ""Button"",
                    ""id"": ""f06f4ec8-6f21-45dc-823c-d0645fa07f08"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Redo"",
                    ""type"": ""Button"",
                    ""id"": ""d33e6ba6-e741-40dd-862b-8c558bf3698a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Undo"",
                    ""type"": ""Button"",
                    ""id"": ""04aad2d5-8989-4a8f-8afe-6b2ccfd60b0d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectBridge"",
                    ""type"": ""Button"",
                    ""id"": ""8ddc964a-6235-4a65-a6fe-1e98b99ca725"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectBuild"",
                    ""type"": ""Button"",
                    ""id"": ""5382e2c2-b3e0-4202-b164-f7dd694c128d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectErase"",
                    ""type"": ""Button"",
                    ""id"": ""3fe8514f-5091-41da-a554-0bfdc3b5416f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Debug"",
                    ""type"": ""Button"",
                    ""id"": ""e05d2c90-4c84-404f-80e3-ac9d9a342d41"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e11500d3-87f0-44f6-9257-387a2bb37772"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectWall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9dce634a-91a3-4e80-b864-6f2f8d569152"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Redo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""177aeba2-1cee-4231-baa7-e9c9ddf21c2a"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Undo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0993538d-ba05-4f96-afce-acdb99677e88"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectBridge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ec1f836-57a9-4a37-ba9d-dc62120bb222"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectBuild"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62492837-43e3-48a0-96a4-54cb898cd5a0"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectErase"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d87628c-68a0-48af-aa78-e791d7bad2c1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Debug"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Zoom"",
            ""bindingGroup"": ""Zoom"",
            ""devices"": []
        }
    ]
}");
        // Inputs
        m_Inputs = asset.FindActionMap("Inputs", throwIfNotFound: true);
        m_Inputs_StartFirstTouch = m_Inputs.FindAction("StartFirstTouch", throwIfNotFound: true);
        m_Inputs_StartSecondTouch = m_Inputs.FindAction("StartSecondTouch", throwIfNotFound: true);
        m_Inputs_FirstTouchPosition = m_Inputs.FindAction("FirstTouchPosition", throwIfNotFound: true);
        m_Inputs_SecondTouchPosition = m_Inputs.FindAction("SecondTouchPosition", throwIfNotFound: true);
        // MapButtons
        m_MapButtons = asset.FindActionMap("MapButtons", throwIfNotFound: true);
        m_MapButtons_SelectWall = m_MapButtons.FindAction("SelectWall", throwIfNotFound: true);
        m_MapButtons_Redo = m_MapButtons.FindAction("Redo", throwIfNotFound: true);
        m_MapButtons_Undo = m_MapButtons.FindAction("Undo", throwIfNotFound: true);
        m_MapButtons_SelectBridge = m_MapButtons.FindAction("SelectBridge", throwIfNotFound: true);
        m_MapButtons_SelectBuild = m_MapButtons.FindAction("SelectBuild", throwIfNotFound: true);
        m_MapButtons_SelectErase = m_MapButtons.FindAction("SelectErase", throwIfNotFound: true);
        m_MapButtons_Debug = m_MapButtons.FindAction("Debug", throwIfNotFound: true);
    }

    ~@InputActions()
    {
        UnityEngine.Debug.Assert(!m_Inputs.enabled, "This will cause a leak and performance issues, InputActions.Inputs.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_MapButtons.enabled, "This will cause a leak and performance issues, InputActions.MapButtons.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Inputs
    private readonly InputActionMap m_Inputs;
    private List<IInputsActions> m_InputsActionsCallbackInterfaces = new List<IInputsActions>();
    private readonly InputAction m_Inputs_StartFirstTouch;
    private readonly InputAction m_Inputs_StartSecondTouch;
    private readonly InputAction m_Inputs_FirstTouchPosition;
    private readonly InputAction m_Inputs_SecondTouchPosition;
    public struct InputsActions
    {
        private @InputActions m_Wrapper;
        public InputsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @StartFirstTouch => m_Wrapper.m_Inputs_StartFirstTouch;
        public InputAction @StartSecondTouch => m_Wrapper.m_Inputs_StartSecondTouch;
        public InputAction @FirstTouchPosition => m_Wrapper.m_Inputs_FirstTouchPosition;
        public InputAction @SecondTouchPosition => m_Wrapper.m_Inputs_SecondTouchPosition;
        public InputActionMap Get() { return m_Wrapper.m_Inputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputsActions set) { return set.Get(); }
        public void AddCallbacks(IInputsActions instance)
        {
            if (instance == null || m_Wrapper.m_InputsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputsActionsCallbackInterfaces.Add(instance);
            @StartFirstTouch.started += instance.OnStartFirstTouch;
            @StartFirstTouch.performed += instance.OnStartFirstTouch;
            @StartFirstTouch.canceled += instance.OnStartFirstTouch;
            @StartSecondTouch.started += instance.OnStartSecondTouch;
            @StartSecondTouch.performed += instance.OnStartSecondTouch;
            @StartSecondTouch.canceled += instance.OnStartSecondTouch;
            @FirstTouchPosition.started += instance.OnFirstTouchPosition;
            @FirstTouchPosition.performed += instance.OnFirstTouchPosition;
            @FirstTouchPosition.canceled += instance.OnFirstTouchPosition;
            @SecondTouchPosition.started += instance.OnSecondTouchPosition;
            @SecondTouchPosition.performed += instance.OnSecondTouchPosition;
            @SecondTouchPosition.canceled += instance.OnSecondTouchPosition;
        }

        private void UnregisterCallbacks(IInputsActions instance)
        {
            @StartFirstTouch.started -= instance.OnStartFirstTouch;
            @StartFirstTouch.performed -= instance.OnStartFirstTouch;
            @StartFirstTouch.canceled -= instance.OnStartFirstTouch;
            @StartSecondTouch.started -= instance.OnStartSecondTouch;
            @StartSecondTouch.performed -= instance.OnStartSecondTouch;
            @StartSecondTouch.canceled -= instance.OnStartSecondTouch;
            @FirstTouchPosition.started -= instance.OnFirstTouchPosition;
            @FirstTouchPosition.performed -= instance.OnFirstTouchPosition;
            @FirstTouchPosition.canceled -= instance.OnFirstTouchPosition;
            @SecondTouchPosition.started -= instance.OnSecondTouchPosition;
            @SecondTouchPosition.performed -= instance.OnSecondTouchPosition;
            @SecondTouchPosition.canceled -= instance.OnSecondTouchPosition;
        }

        public void RemoveCallbacks(IInputsActions instance)
        {
            if (m_Wrapper.m_InputsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputsActions instance)
        {
            foreach (var item in m_Wrapper.m_InputsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputsActions @Inputs => new InputsActions(this);

    // MapButtons
    private readonly InputActionMap m_MapButtons;
    private List<IMapButtonsActions> m_MapButtonsActionsCallbackInterfaces = new List<IMapButtonsActions>();
    private readonly InputAction m_MapButtons_SelectWall;
    private readonly InputAction m_MapButtons_Redo;
    private readonly InputAction m_MapButtons_Undo;
    private readonly InputAction m_MapButtons_SelectBridge;
    private readonly InputAction m_MapButtons_SelectBuild;
    private readonly InputAction m_MapButtons_SelectErase;
    private readonly InputAction m_MapButtons_Debug;
    public struct MapButtonsActions
    {
        private @InputActions m_Wrapper;
        public MapButtonsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectWall => m_Wrapper.m_MapButtons_SelectWall;
        public InputAction @Redo => m_Wrapper.m_MapButtons_Redo;
        public InputAction @Undo => m_Wrapper.m_MapButtons_Undo;
        public InputAction @SelectBridge => m_Wrapper.m_MapButtons_SelectBridge;
        public InputAction @SelectBuild => m_Wrapper.m_MapButtons_SelectBuild;
        public InputAction @SelectErase => m_Wrapper.m_MapButtons_SelectErase;
        public InputAction @Debug => m_Wrapper.m_MapButtons_Debug;
        public InputActionMap Get() { return m_Wrapper.m_MapButtons; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapButtonsActions set) { return set.Get(); }
        public void AddCallbacks(IMapButtonsActions instance)
        {
            if (instance == null || m_Wrapper.m_MapButtonsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MapButtonsActionsCallbackInterfaces.Add(instance);
            @SelectWall.started += instance.OnSelectWall;
            @SelectWall.performed += instance.OnSelectWall;
            @SelectWall.canceled += instance.OnSelectWall;
            @Redo.started += instance.OnRedo;
            @Redo.performed += instance.OnRedo;
            @Redo.canceled += instance.OnRedo;
            @Undo.started += instance.OnUndo;
            @Undo.performed += instance.OnUndo;
            @Undo.canceled += instance.OnUndo;
            @SelectBridge.started += instance.OnSelectBridge;
            @SelectBridge.performed += instance.OnSelectBridge;
            @SelectBridge.canceled += instance.OnSelectBridge;
            @SelectBuild.started += instance.OnSelectBuild;
            @SelectBuild.performed += instance.OnSelectBuild;
            @SelectBuild.canceled += instance.OnSelectBuild;
            @SelectErase.started += instance.OnSelectErase;
            @SelectErase.performed += instance.OnSelectErase;
            @SelectErase.canceled += instance.OnSelectErase;
            @Debug.started += instance.OnDebug;
            @Debug.performed += instance.OnDebug;
            @Debug.canceled += instance.OnDebug;
        }

        private void UnregisterCallbacks(IMapButtonsActions instance)
        {
            @SelectWall.started -= instance.OnSelectWall;
            @SelectWall.performed -= instance.OnSelectWall;
            @SelectWall.canceled -= instance.OnSelectWall;
            @Redo.started -= instance.OnRedo;
            @Redo.performed -= instance.OnRedo;
            @Redo.canceled -= instance.OnRedo;
            @Undo.started -= instance.OnUndo;
            @Undo.performed -= instance.OnUndo;
            @Undo.canceled -= instance.OnUndo;
            @SelectBridge.started -= instance.OnSelectBridge;
            @SelectBridge.performed -= instance.OnSelectBridge;
            @SelectBridge.canceled -= instance.OnSelectBridge;
            @SelectBuild.started -= instance.OnSelectBuild;
            @SelectBuild.performed -= instance.OnSelectBuild;
            @SelectBuild.canceled -= instance.OnSelectBuild;
            @SelectErase.started -= instance.OnSelectErase;
            @SelectErase.performed -= instance.OnSelectErase;
            @SelectErase.canceled -= instance.OnSelectErase;
            @Debug.started -= instance.OnDebug;
            @Debug.performed -= instance.OnDebug;
            @Debug.canceled -= instance.OnDebug;
        }

        public void RemoveCallbacks(IMapButtonsActions instance)
        {
            if (m_Wrapper.m_MapButtonsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMapButtonsActions instance)
        {
            foreach (var item in m_Wrapper.m_MapButtonsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MapButtonsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MapButtonsActions @MapButtons => new MapButtonsActions(this);
    private int m_ZoomSchemeIndex = -1;
    public InputControlScheme ZoomScheme
    {
        get
        {
            if (m_ZoomSchemeIndex == -1) m_ZoomSchemeIndex = asset.FindControlSchemeIndex("Zoom");
            return asset.controlSchemes[m_ZoomSchemeIndex];
        }
    }
    public interface IInputsActions
    {
        void OnStartFirstTouch(InputAction.CallbackContext context);
        void OnStartSecondTouch(InputAction.CallbackContext context);
        void OnFirstTouchPosition(InputAction.CallbackContext context);
        void OnSecondTouchPosition(InputAction.CallbackContext context);
    }
    public interface IMapButtonsActions
    {
        void OnSelectWall(InputAction.CallbackContext context);
        void OnRedo(InputAction.CallbackContext context);
        void OnUndo(InputAction.CallbackContext context);
        void OnSelectBridge(InputAction.CallbackContext context);
        void OnSelectBuild(InputAction.CallbackContext context);
        void OnSelectErase(InputAction.CallbackContext context);
        void OnDebug(InputAction.CallbackContext context);
    }
}
