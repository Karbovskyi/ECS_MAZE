//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherBuildingMode;

    public static Entitas.IMatcher<GameEntity> BuildingMode {
        get {
            if (_matcherBuildingMode == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.BuildingMode);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherBuildingMode = matcher;
            }

            return _matcherBuildingMode;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.AAAGame.Map.BuildingModeComponent buildingMode { get { return (Code.AAAGame.Map.BuildingModeComponent)GetComponent(GameComponentsLookup.BuildingMode); } }
    public Code.AAAGame.Map.BuildingMode BuildingMode { get { return buildingMode.Value; } }
    public bool hasBuildingMode { get { return HasComponent(GameComponentsLookup.BuildingMode); } }

    public GameEntity AddBuildingMode(Code.AAAGame.Map.BuildingMode newValue) {
        var index = GameComponentsLookup.BuildingMode;
        var component = (Code.AAAGame.Map.BuildingModeComponent)CreateComponent(index, typeof(Code.AAAGame.Map.BuildingModeComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceBuildingMode(Code.AAAGame.Map.BuildingMode newValue) {
        var index = GameComponentsLookup.BuildingMode;
        var component = (Code.AAAGame.Map.BuildingModeComponent)CreateComponent(index, typeof(Code.AAAGame.Map.BuildingModeComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveBuildingMode() {
        RemoveComponent(GameComponentsLookup.BuildingMode);
        return this;
    }
}
